JAVA는 C++에 기반한 객체지향언어

서버 쪽 프로그래밍을 위한 서블릿(servlet), JSP(Java Server Pages)

자바가상머신(JVM) : 일종의 에뮬레이터
자바 응용프로그램은 운영체제, 하드웨어가 아닌 JVM하고만 통신하고 JVM이 자바 응용프로그램으로부터 전달받은 명령을 해당 운영체제가 이해할 수 있도록 변환함

/** JAVA 응용 프로그램 - > JVM -> 운영체제(OS) -> 컴퓨터 **/
※ 일반 응용프로그램의 경우 :: 일반 어플 - > 운영체제 -> 컴퓨터  , 따라서 일반 어플은 OS 종속적
즉, 일반 어플은 OS에 따라 그 어플리케이션을 변경해주어야 한다.
JVM의 경우 JVM만 종속적이기 때문에 해당 JVM만 OS에 따라 변경시켜주면 된다


자바로 작성된 프로그램은 운영체제에 독립적
JVM 자체는 운영체제에 종속적 ====> 운영체제에 따른 JVM을 제공하고 있음
자바 어플이 실행되기 위해선 반드시 JVM이 필요함

JAVA는 객체지향 프로그래밍언어  (객체지향언어) : 상속, 캡슐화, 다형성에 대한 순수 객체지향언어

STS // 아파치 톰캣 // 전자정부프레임워크 // 이클립스로 작업

JDK 설치 완료시 bin 폴더에 추가해야하는 path (C:\Program Files\Java\jdk1.8.0_202\bin)
path : OS가 파일의 위치(디렉토리)를 파악하는 데 사용하는 경로(path)

※ path 확인하는 방법
 - 내 컴퓨터의 속성 - > 고급 시스템 설정 - > 고급의 환경 변수 - > 시스템 변수에서 JAVA_HOME의 편집 - >
변수 값을 변경하기 위해 디렉터리 찾아보기 - > jdk1.8.0_202가 설치된 C:\Program files\Java\jdk.1.8.0_202를 지정하고 확인
 -- 시스템 변수에서 Path 편집 - > 맨 밑으로 내리고 새로 만들기 클릭 - > %JAVA_HOME%\bin을 입력하고 확인
 --- 실행 - > cmd - > java -version 입력하고 잘 적용되었는지 확인하기

※ JDK와 JRE의 차이점
JDK : 자바 개발도구(Java Development Kit) / JRE + 개발에 필요한 실행파일
JRE : 자바 실행환경(Java Runtime Environment), 자바 프로그램 실행 최소환경 / JVM + 클래스 라이브러리(Java API)

class 클래스이름 {
    /*
        주석을 제외한 모든 코드는 클래스의 블럭{} 내에 작성하여야 한다.
        */
        /* 
            package, import문은 클래스 밖에서 작성한다 
        */

syso + ctrl space bar 자동완성

public static void main(String[] args) : main 메서드의 선언부

하나의 소스파일에 둘 이상의 클래스를 정의하려면 소스파일의 이름은 public class의 이름과 일치해야 한다.
Dongjin 클래스를 하나의 소스파일에 둘 이상을 넣으려면 java 파일의 이름(Dongjin)과 class의 이름(pulic class Dongjin)이 일치해야 한다.


}

소스파일의 이름 : Hello2.java
public class Hello2 {}
            class Hello3 {}

소스파일의 이름 : Hello2.java
public class Hello2 {}
public class Hello3 {}              // 이건 틀린 작성법

각 클래스(public)를 별도의 소스파일에 나눠서 저장

Hello2.java
public class Hello2 {
    
}
    class fuck you;

Hello3.java
public class Hello3 {

    class i'm sorry it's just joke lul;

}

※ JAVA는 대문자와 소문자를 구분한다


public static void main(String[] args)
public static void main(String[] args)

※주석 많이많이 반드시 적기


